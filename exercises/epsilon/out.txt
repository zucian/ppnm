exercise epsilon 
1)
my INT_MAX = 2147483647 
my max int while = 2147483647
my max int do = 2147483647
my INT_MIN = -2147483648 
my min int while = -2147483648
my min int do = -2147483648
Calculated eps double while = 2.22045e-16
Calculated eps double for = 2.22045e-16
Double eps = 2.22045e-16
Calculated eps float while = 1.19209e-07
Calculated eps float for = 1.19209e-07
Float eps = 1.19209e-07
Calculated eps long double while = 1
Calculated eps long double for = 1.0842e-19
Long Double eps = 1.0842e-19
max = 1073741823 
sum_up_float=15.403683
 sum_down_float= 18.807919 

The difference is due to noncommutativeness of floating points arithmetic. At some point a rounding error will occur 

 I do not think it converges as function of max, as we will get a rounding error
sum_up_double=21.371631
 sum_down_double= 21.371631 

The same thing do not happen for doubles, since they have more precision 
Function for part 3 is found in equals.c

